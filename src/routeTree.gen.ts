/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as WikiIndexRouteImport } from './routes/wiki/index'
import { Route as TeamsIndexRouteImport } from './routes/teams/index'
import { Route as OverIndexRouteImport } from './routes/over/index'
import { Route as ContactIndexRouteImport } from './routes/contact/index'
import { Route as DynamicPagenameRouteImport } from './routes/dynamic/$pagename'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const WikiIndexRoute = WikiIndexRouteImport.update({
  id: '/wiki/',
  path: '/wiki/',
  getParentRoute: () => rootRouteImport,
} as any)
const TeamsIndexRoute = TeamsIndexRouteImport.update({
  id: '/teams/',
  path: '/teams/',
  getParentRoute: () => rootRouteImport,
} as any)
const OverIndexRoute = OverIndexRouteImport.update({
  id: '/over/',
  path: '/over/',
  getParentRoute: () => rootRouteImport,
} as any)
const ContactIndexRoute = ContactIndexRouteImport.update({
  id: '/contact/',
  path: '/contact/',
  getParentRoute: () => rootRouteImport,
} as any)
const DynamicPagenameRoute = DynamicPagenameRouteImport.update({
  id: '/dynamic/$pagename',
  path: '/dynamic/$pagename',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dynamic/$pagename': typeof DynamicPagenameRoute
  '/contact': typeof ContactIndexRoute
  '/over': typeof OverIndexRoute
  '/teams': typeof TeamsIndexRoute
  '/wiki': typeof WikiIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dynamic/$pagename': typeof DynamicPagenameRoute
  '/contact': typeof ContactIndexRoute
  '/over': typeof OverIndexRoute
  '/teams': typeof TeamsIndexRoute
  '/wiki': typeof WikiIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/dynamic/$pagename': typeof DynamicPagenameRoute
  '/contact/': typeof ContactIndexRoute
  '/over/': typeof OverIndexRoute
  '/teams/': typeof TeamsIndexRoute
  '/wiki/': typeof WikiIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dynamic/$pagename'
    | '/contact'
    | '/over'
    | '/teams'
    | '/wiki'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/dynamic/$pagename' | '/contact' | '/over' | '/teams' | '/wiki'
  id:
    | '__root__'
    | '/'
    | '/dynamic/$pagename'
    | '/contact/'
    | '/over/'
    | '/teams/'
    | '/wiki/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DynamicPagenameRoute: typeof DynamicPagenameRoute
  ContactIndexRoute: typeof ContactIndexRoute
  OverIndexRoute: typeof OverIndexRoute
  TeamsIndexRoute: typeof TeamsIndexRoute
  WikiIndexRoute: typeof WikiIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/wiki/': {
      id: '/wiki/'
      path: '/wiki'
      fullPath: '/wiki'
      preLoaderRoute: typeof WikiIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/teams/': {
      id: '/teams/'
      path: '/teams'
      fullPath: '/teams'
      preLoaderRoute: typeof TeamsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/over/': {
      id: '/over/'
      path: '/over'
      fullPath: '/over'
      preLoaderRoute: typeof OverIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/contact/': {
      id: '/contact/'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dynamic/$pagename': {
      id: '/dynamic/$pagename'
      path: '/dynamic/$pagename'
      fullPath: '/dynamic/$pagename'
      preLoaderRoute: typeof DynamicPagenameRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DynamicPagenameRoute: DynamicPagenameRoute,
  ContactIndexRoute: ContactIndexRoute,
  OverIndexRoute: OverIndexRoute,
  TeamsIndexRoute: TeamsIndexRoute,
  WikiIndexRoute: WikiIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
